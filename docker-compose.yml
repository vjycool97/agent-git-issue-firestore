version: '3.8'

services:
  # Main application
  github-firebase-connector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: github-firebase-connector
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_SERVICE_ACCOUNT_PATH=/app/config/service-account.json
      - FIREBASE_EMULATOR_HOST=firestore-emulator:8080
      - FIREBASE_USE_EMULATOR=false
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      - firestore-emulator
    networks:
      - connector-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Firestore Emulator for development/testing
  firestore-emulator:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    container_name: firestore-emulator
    ports:
      - "8081:8080"
      - "4000:4000"  # Firestore UI
    command: >
      sh -c "gcloud beta emulators firestore start 
             --host-port=0.0.0.0:8080 
             --project=${FIREBASE_PROJECT_ID:-test-project}
             --rules=/dev/null"
    environment:
      - FIRESTORE_PROJECT_ID=${FIREBASE_PROJECT_ID:-test-project}
    networks:
      - connector-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - connector-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - connector-network
    profiles:
      - monitoring

networks:
  connector-network:
    driver: bridge

volumes:
  grafana-storage: